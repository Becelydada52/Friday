import speech_recognition as sr
from pycaw.pycaw import AudioUtilities, IAudioEndpointVolume
from ctypes import cast, POINTER
from comtypes import CLSCTX_ALL
import re
import pyttsx3
import time
import os
import subprocess
import numpy as np
from collections import deque
import random
import sys

class FridayAssistant:
    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.energy_threshold = 4000
        self.dynamic_energy_ratio = 1.5
        self.pause_threshold = 0.8
        self.phrase_threshold = 0.3
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.engine = self.init_tts()
        self.volume_control = self.init_volume()
        self.recognizer = sr.Recognizer()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—è
        self.configure_recognizer()
        
        # –ò—Å—Ç–æ—Ä–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–≤—É–∫–∞
        self.energy_history = deque(maxlen=20)
        
        # –ü—É—Ç–∏ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º
        self.music_apps = {
            'yandex': os.path.expanduser('~') + r'\AppData\Local\Yandex\YandexMusic\YandexMusic.exe',
            'spotify': os.path.expanduser('~') + r'\AppData\Roaming\Spotify\Spotify.exe',
            'default': r'C:\Program Files\Windows Media Player\wmplayer.exe'
        }
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_active = False
        self.should_exit = False
        self.last_activation = 0

    def configure_recognizer(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏"""
        self.recognizer.dynamic_energy_threshold = True
        self.recognizer.pause_threshold = self.pause_threshold
        self.recognizer.phrase_threshold = self.phrase_threshold
        self.recognizer.non_speaking_duration = 0.2
        self.recognizer.energy_threshold = self.energy_threshold

    def init_tts(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä–∞ —Ä–µ—á–∏"""
        engine = pyttsx3.init()
        engine.setProperty('rate', 160)
        engine.setProperty('volume', 0.9)
        return engine

    def init_volume(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏"""
        devices = AudioUtilities.GetSpeakers()
        interface = devices.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, None)
        return cast(interface, POINTER(IAudioEndpointVolume))

    def speak(self, text):
        """–ü—Ä–æ–∏–∑–Ω–µ—Å–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –≤—ã–≤–æ–¥–æ–º –≤ –∫–æ–Ω—Å–æ–ª—å"""
        print(f"[–ü—è—Ç–Ω–∏—Ü–∞]: {text}")
        self.engine.say(text)
        self.engine.runAndWait()

    def calculate_rms(self, audio_data):
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∑–≤—É–∫–∞"""
        audio_buffer = np.frombuffer(audio_data.get_raw_data(), dtype=np.int16)
        return np.sqrt(np.mean(audio_buffer**2))

    def adaptive_energy_threshold(self, audio_data):
        """–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞"""
        try:
            energy = self.calculate_rms(audio_data)
            self.energy_history.append(energy)
            
            if len(self.energy_history) > 5:
                median_energy = np.median(self.energy_history)
                new_threshold = median_energy * self.dynamic_energy_ratio
                self.recognizer.energy_threshold = np.clip(
                    new_threshold,
                    300,  # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥
                    6000  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –ø–æ—Ä–æ–≥–∞: {e}")
            self.recognizer.energy_threshold = 4000

    def listen_for_trigger(self, source):
        """–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–Ω–æ–≥–æ —Å–ª–æ–≤–∞"""
        try:
            print(f"üî¥ –û–∂–∏–¥–∞–Ω–∏–µ (–ø–æ—Ä–æ–≥: {self.recognizer.energy_threshold:.1f})...")
            audio = self.recognizer.listen(
                source,
                timeout=3,
                phrase_time_limit=2
            )
            
            self.adaptive_energy_threshold(audio)
            
            try:
                text = self.recognizer.recognize_google(audio, language="ru-RU").lower()
                print(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {text}")
                
                trigger_phrases = [
                    '–ø—è—Ç–Ω–∏—Ü–∞', '–ø—è—Ç–Ω–∏—Ü—É', '–ø—è—Ç–Ω–∏—á–∞', '–ø—è—Ç–Ω–∏—á–∫–∞',
                    'friday', '—Ñ—Ä–∞–π–¥–∏', '—ç–π –ø—è—Ç–Ω–∏—Ü–∞'
                ]
                
                if any(phrase in text for phrase in trigger_phrases):
                    current_time = time.time()
                    if current_time - self.last_activation > 5:
                        self.last_activation = current_time
                        return True
                        
            except sr.UnknownValueError:
                pass
                
        except sr.WaitTimeoutError:
            pass
            
        return False

    def wake_up(self):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
        self.is_active = True
        self.speak(random.choice([
            "–î–∞, —Å–ª—É—à–∞—é –≤–∞—Å",
            "–Ø –∑–¥–µ—Å—å",
            "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
            "–ì–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å"
        ]))
        return self.active_listening()

    def active_listening(self):
        """–†–µ–∂–∏–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥"""
        with sr.Microphone() as source:
            try:
                print("üü¢ –ê–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º...")
                audio = self.recognizer.listen(
                    source,
                    timeout=5,
                    phrase_time_limit=5
                )
                command = self.recognizer.recognize_google(audio, language="ru-RU").lower()
                self.process_command(command)
                
            except sr.UnknownValueError:
                self.speak("–ù–µ —Ä–∞—Å—Å–ª—ã—à–∞–ª–∞ –∫–æ–º–∞–Ω–¥—É")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞: {e}")
            finally:
                self.return_to_sleep()

    def start_music_player(self, player_name=None):
        """–ó–∞–ø—É—Å–∫ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            app_name = player_name or 'default'
            if app_name in self.music_apps:
                path = self.music_apps[app_name]
                if os.path.exists(path):
                    os.startfile(path)
                    self.speak(f"–ó–∞–ø—É—Å–∫–∞—é {app_name}")
                    return
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –∑–∞–ø—É—Å–∫–∞
            commands = {
                'yandex': 'start yandexmusic:',
                'spotify': 'start spotify:',
                'default': 'start wmplayer'
            }
            subprocess.run(commands.get(app_name, commands['default']), shell=True)
            self.speak(f"–ó–∞–ø—É—Å–∫–∞—é {app_name}")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–µ–µ—Ä–∞: {e}")
            self.speak("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –º—É–∑—ã–∫—É")

    def set_volume(self, level):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏"""
        try:
            vol = max(0.0, min(1.0, level/100.0))
            self.volume_control.SetMasterVolumeLevelScalar(vol, None)
            self.speak(f"–ì—Ä–æ–º–∫–æ—Å—Ç—å {int(level)}%")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏: {e}")

    def process_command(self, command):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
        if not command:
            return
            
        print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã: {command}")
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç—å—é
        if "–≥—Ä–æ–º–∫–æ—Å—Ç—å" in command:
            if num := re.search(r'\d+', command):
                self.set_volume(int(num.group()))
            elif "–º–∞–∫—Å–∏–º—É–º" in command:
                self.set_volume(100)
            elif "–º–∏–Ω–∏–º—É–º" in command:
                self.set_volume(0)
            elif "–ø–æ–ª–æ–≤–∏–Ω–∞" in command:
                self.set_volume(50)
        
        # –ó–∞–ø—É—Å–∫ –º—É–∑—ã–∫–∏
        elif any(cmd in command for cmd in ["–≤–∫–ª—é—á–∏ –º—É–∑—ã–∫—É", "–∑–∞–ø—É—Å—Ç–∏ –º—É–∑—ã–∫—É"]):
            if "—è–Ω–¥–µ–∫—Å" in command or "yandex" in command:
                self.start_music_player('yandex')
            elif "spotify" in command:
                self.start_music_player('spotify')
            else:
                self.start_music_player()
        
        # –ü—Ä–æ—á–∏–µ –∫–æ–º–∞–Ω–¥—ã
        elif "—Å–ø–∞—Å–∏–±–æ" in command:
            self.speak("–í—Å–µ–≥–¥–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!")
        elif any(cmd in command for cmd in ["–≤—ã—Ö–æ–¥", "–∑–∞–∫—Ä–æ–π—Å—è"]):
            self.should_exit = True
            self.speak("–í—ã–∫–ª—é—á–∞—é—Å—å")
        else:
            self.speak("–ù–µ –ø–æ–Ω—è–ª–∞ –∫–æ–º–∞–Ω–¥—É")

    def return_to_sleep(self):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è"""
        self.is_active = False
        print("–í–æ–∑–≤—Ä–∞—Ç –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º...")

    def calibrate_microphone(self, source, duration=3):
        """–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞"""
        self.speak("–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞... –ù–µ —à—É–º–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥")
        self.recognizer.adjust_for_ambient_noise(source, duration=duration)
        self.energy_threshold = self.recognizer.energy_threshold
        self.speak("–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã"""
        with sr.Microphone() as source:
            self.calibrate_microphone(source)
            
            try:
                self.speak("–ü—è—Ç–Ω–∏—Ü–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
                while not self.should_exit:
                    if self.listen_for_trigger(source):
                        self.wake_up()
                    time.sleep(0.1)
                        
            except KeyboardInterrupt:
                self.speak("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
            except Exception as e:
                print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                self.speak("–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞")

if __name__ == '__main__':
    assistant = FridayAssistant()
    assistant.run()